substitutions:
  id: "interpreter"
  friendly_name: "Interval Interpreter"
  reset_time: "3000000" # microseconds (1s = 1000000 microseconds)
  short_signal_time: "200000" # microseconds
  long_signal_time: "750000" # microseconds
  monitored_sensor_id: monitored_sensor
  script_execute_on_match: dummy_execute_script # script to execute when the secret code matches
  secret_code_to_match: "" # secret_code_to_match @ use S for short press and L for long press, e.g. "SSLLS" for short-short-long-long-short



globals:
  - id: ${id}_start_time
    type: int
    restore_value: no
    initial_value: "0"
  - id: ${id}_last_input_time
    type: int
    restore_value: no
    initial_value: "0"
  - id: ${id}_secret_code
    type: std::string
    restore_value: no
    initial_value: '""'
  - id: ${id}_secret_code_to_match
    type: std::string
    restore_value: no
    initial_value: '"${${id}_secret_code_to_match}"'

binary_sensor:
  - id: !extend ${monitored_sensor_id}
    on_press:
      then:
        - script.execute: handle_press
    on_release:
      then:
        - script.execute: handle_release

script:
  - id: dummy_execute_script
    then:
      - logger.log:
          format: "SECRET CODE MATCHED!! No script was executed but the dummy instead."
          tag: ${id}
          level: WARN
  - id: ${id}_update_secretcode
    parameters:
      new_code: string
    then:
      - globals.set:
            id: ${id}_secret_code_to_match
            value: !lambda "return new_code;"
      - lambda: |-
          if (new_code.empty()) {
            ESP_LOGE("${id}", "[update_secretcode] The new secret code is empty. This will stop the intervalinterpreter from working.");
          }
          if (new_code.length() == 1) {
            ESP_LOGW("${id}", "[update_secretcode] The secret_code_to_match is just one letter. This could be unsafe depending on your configuration.");
          }
          for (char &c : new_code) {
            if (c != 'L' && c != 'S') {
              ESP_LOGE("${id}", "[update_secretcode] Invalid character '%c' in the new secret code. Only 'L' and 'S' are allowed. Code was saved, but interpreter won't be able to match this, ever.", c);
            }
          }
          ESP_LOGW("${id}", "Updated secret_code_to_match to: %s", new_code.c_str());
  - id: handle_press
    then:
      - lambda: |-
          if (id(${id}_secret_code_to_match).empty()) {
            ESP_LOGD("${id}", "[handle_press] The secret_code_to_match is empty. Please set a valid secret code to match.");
            return;
          }
          int local_start_time = system_get_time();
          if (local_start_time - id(${id}_last_input_time) > ${reset_time}) {
            ESP_LOGD("${id}", "resetting secret code because reset_time has passed");
            id(${id}_secret_code).clear();  // Reset the code after ${reset_time} seconds of no input
          }
          id(${id}_start_time) = local_start_time;
  - id: handle_release
    then:
      - lambda: |-
          if (id(${id}_secret_code_to_match).empty()) {
            ESP_LOGD("${id}", "[handle_release] The secret_code_to_match is empty. Please set a valid secret code to match.");
            return;
          }
          int release_time = system_get_time();
          int press_duration = release_time - id(${id}_start_time);
          if (press_duration < ${short_signal_time}) {
            id(${id}_secret_code).append("S");  // Short press
          } else if (press_duration < ${long_signal_time}) {
            id(${id}_secret_code).append("L");  // Long press
          } else {
            id(${id}_secret_code).clear();  // Reset the code if the press was longer than ${long_signal_time} ms
          }
          id(${id}_last_input_time) = release_time;
          ESP_LOGD("${id}", "[handle_release] Press began at: %d, stopped at: %d, duration: %d ms", id(${id}_start_time), release_time, press_duration);
          ESP_LOGI("${id}", "[handle_release] Current inputted secret code: %s", id(${id}_secret_code).c_str());
          if (id(${id}_secret_code) == id(${id}_secret_code_to_match)) {
            ESP_LOGI("${id}", "SECRET CODE [${secret_code_to_match}] MATCHED!! Executing script ${script_execute_on_match}.");
            id(${id}_secret_code).clear();  // Reset the code after a successful match
            id(${script_execute_on_match}).execute();
          }
